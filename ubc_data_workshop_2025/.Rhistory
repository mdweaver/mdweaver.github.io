shape = vt$geometry %>%  st_transform(., "EPSG:4326") %>% st_union
shape
shape %>% st_crs()
village_points
village_points <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
select(ts_pcode, vt_pcode, village_pcode, latitude, longitude) %>%
filter(!is.na(latitude) & latitude < 30) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = st_crs("ESPG:4326"))
village_points <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
select(ts_pcode, vt_pcode, village_pcode, latitude, longitude) %>%
filter(!is.na(latitude) & latitude < 30) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = st_crs("EPSG:4326"))
vil_temp = st_intersects(village_points, shape, sparse = F) %>%
apply(1, any) %>%
which %>%
village_points[.,]
vil_temp
nrow(vil_temp)
?st_voronoi
vt = vt_list[100]
label = vt$VT_Pcode
shape = vt$geometry %>%  st_transform(., "EPSG:4326") %>% st_union
vt
shape = vt$geometry %>% st_union
vt$geometry
vt
vt = vt_list[[100]]
label = vt$VT_Pcode
shape = vt$geometry %>% st_union
vil_temp = st_intersects(village_points, shape, sparse = F) %>%
apply(1, any) %>%
which %>%
village_points[.,]
vil_temp
st_voronoi(vil_temp, shape) %>% plot
label = vt$VT_Pcode
shape = vt$geometry %>% st_union
vil_temp = st_intersects(village_points, shape, sparse = F) %>%
apply(1, any) %>%
which %>%
village_points[.,]
plot(shape)
plot(vil_temp$geometry, add   = T)
?st_buffer
units::as_units()
?units::as_units
village_points <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
select(ts_pcode, vt_pcode, village_pcode, latitude, longitude) %>%
filter(!is.na(latitude) & latitude < 30) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = st_crs("EPSG:4326")) %>%
st_buffer(dist = set_units(2, m))
village_points <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
select(ts_pcode, vt_pcode, village_pcode, latitude, longitude) %>%
filter(!is.na(latitude) & latitude < 30) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = st_crs("EPSG:4326")) %>%
st_buffer(dist = units::set_units(2, m))
village_points <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
select(ts_pcode, vt_pcode, village_pcode, latitude, longitude) %>%
filter(!is.na(latitude) & latitude < 30) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = st_crs("EPSG:4326")) %>%
st_buffer(dist = units::set_units(2, km))
jrc_100 = list.files('../raw-data/floods/jrc',
pattern = 'RP100',
full.names = T) %>%
lapply(., rast) %>%
sprc %>%
merge %>%
subst(., NA, 0) %>%
terra::resample(., pop)
jrc_100_2 <- classify(jrc_100, c(1e-10,0, 0.15, 0.5, 1.5, 998), include.lowest=TRUE, brackets=TRUE)
v_risk = exact_extract(jrc_100_2, village_points, "frac")
v_depth = exact_extract(jrc_100, village_points, "mean")
v_depth
village_risk = bind_cols(village_points, v_risk)
v_depth$flood_depth = v_depth
v_depth = exact_extract(jrc_100, village_points, "mean")
village_risk = bind_cols(village_points, v_risk)
village_risk$flood_depth = v_depth
village_risk = v_risk
village_risk$village_pcode = village_points$village_pcode
village_risk$flood_depth = v_depth
village_flooding <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
mutate(flood_affected = x1_probable_flood_affected_yes_no %in% 'Yes')
village_flooding <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
mutate(flood_affected = x1_probable_flood_affected_yes_no %in% 'Yes') %>%
select(village_pcode, flood_affected) %>%
filter(!is.na(village_pcode))
v_test = village_flooding %>% left_join(village_risk, by = 'village_pcode')
village_test
v_test
feols(flood_affected ~ flood_depth, v_test)
require(fixest)
fixest::feols(flood_affected ~ flood_depth, v_test)
fixest::feols(flood_affected ~ flood_depth, v_test)
village_flooding <-
suppressWarnings(import("../raw-data/floods/01. Flood-township-affected-Dec-2015.xlsx")) %>%
clean_names() %>%
mutate(flood_affected = x1_probable_flood_affected_yes_no %in% 'Yes') %>%
select(village_pcode, ts_pcode, vt_pcode, flood_affected) %>%
filter(!is.na(village_pcode)) %>%
group_by(ts_pcode) %>%
mutate(any_affected = any(flood_affected)) %>%
ungroup()
v_test = village_flooding %>% left_join(village_risk, by = 'village_pcode')
fixest::feols(flood_affected ~ splines::ns(flood_depth, df= 4), v_test)
fixest::feols(flood_affected ~ splines::ns(flood_depth, df= 4), v_test %>% filter((any_affected)))
fixest::feols(flood_affected ~ flood_depth| , v_test %>% filter((any_affected)))
fixest::feols(flood_affected ~ flood_depth , v_test %>% filter((any_affected)))
fixest::feols(flood_affected ~ flood_depth | ts_pcode, v_test)
fixest::feols(flood_affected ~ flood_depth | vt_pcode, v_test)
v_test
fixest::feols(flood_affected ~ frac_4 | ts_pcode, v_test)
fixest::feols(flood_affected ~ frac_4 | vt_pcode, v_test)
fixest::feols(flood_affected ~ frac_4 + frac_3, v_test)
fixest::feols(flood_affected ~ frac_4 , v_test)
twp_risk_out = readRDS("../cleaned-data/flood_control_jrc.RDS")
# load main analysis data
analysis_df <-
readRDS("../../02-replication/analysis_df.rds")
fl_out <-
analysis_df %>%
left_join(twp_risk_out, by = c("svy_sh_tsp_code" = "TS_PCODE"))
feols(flood_affected_prop_villages ~  flood_depth  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
fl_out
feols(flood_affected_prop_villages ~  risk_pop_4  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
ffeols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + risk_pop_4 + flood_depth  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + risk_pop_4 + flood_depth  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
fl_out <-
analysis_df %>%
filter(svy_sh_religion_rc == "Buddhist") %>%
mutate(ag_lab = (svy_sh_income_source_rc %in%c("Agriculture", "Day Labour"))*1) %>%
left_join(twp_risk_out, by = c("svy_sh_tsp_code" = "TS_PCODE"))
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages  ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + flood_depth,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + splines::ns(risk_pop_4 + risk_pop_3, df = 4) + flood_depth,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + splines::ns(risk_pop_4, df = 4) + splines::ns(risk_pop_3, df = 4) + flood_depth,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + splines::ns(risk_pop_4, df = 3) + splines::ns(risk_pop_3, df = 3) + flood_depth,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + flood_depth,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_elevation + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_km_to_yangon + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_terrain_ruggedness + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + risk_pop_4,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages*ag_lab + risk_pop_4,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages*ag_lab + risk_pop_4*ag_lab,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + risk_pop_4,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_average  ~  flood_affected_prop_villages + risk_pop_4,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_all  ~  flood_affected_prop_villages + risk_pop_4,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + geo_border_township +geo_elevation +geo_km_to_yangon +geo_terrain_ruggedness + gad_muslim_prop + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 | id_state_region_name.x,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages  + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 | id_state_region_name.x,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
plot(fl_out$geo_border_township, fl_out$flood_affected_prop_villages)
plot(fl_out$geo_elevation, fl_out$flood_affected_prop_villages)
plot(fl_out$geo_km_to_yangon, fl_out$flood_affected_prop_villages)
plot(fl_out$geo_terrain_ruggedness, fl_out$flood_affected_prop_villages)
plot(fl_out$gad_muslim_prop, fl_out$flood_affected_prop_villages)
tp_centroids =   town_maps_raw %>% st_centroid
tp_centroids =   town_maps_raw$geometry %>% st_centroid(.)
sf_use_s2(F)
tp_centroids =   town_maps_raw$geometry %>% st_centroid(.)
tp_centroids
tp_centroids =   town_maps_raw$geometry %>% st_centroid(.) %>% st_coordinates()
tp_centroids
tp_centroids =   town_maps_raw$geometry %>% st_centroid(.) %>% st_coordinates() %>% as_tibble %>%
mutate(svy_sh_tsp_code = town_maps_raw$TS_PCODE)
fl_out <-
analysis_df %>%
filter(svy_sh_religion_rc == "Buddhist") %>%
mutate(ag_lab = (svy_sh_income_source_rc %in%c("Agriculture", "Day Labour"))*1) %>%
left_join(twp_risk_out, by = c("svy_sh_tsp_code" = "TS_PCODE")) %>%
left_join(tp_centroids, by = 'svy_sh_tsp_code')
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
require(mgcv)
gam(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), fl_out)
gam(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), data = fl_out)
gam(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), data = fl_out)
gam(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), data = fl_out)     %>% summary
fl_collapsed = fl_out %>% group_by(svy_sh_tsp_code, flood_affected_prop_villages, X, Y, risk_pop_1, risk_pop_2, risk_pop_3, risk_pop_4, flood_depth) %>%
summarize(dv = mean(svy_sh_anti_muslim_prejudice_bogardus))
gam(dv  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), data = fl_collapsed)     %>% summary
fl_collapsed
fl_collapsed = fl_out %>% group_by(svy_sh_tsp_code, flood_affected_prop_villages, X, Y, risk_pop_1, risk_pop_2, risk_pop_3, risk_pop_4, flood_depth) %>%
summarize(dv = mean(svy_sh_anti_muslim_prejudice_bogardus, na.rm = T))
gam(dv  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp'), data = fl_collapsed)     %>% summary
gam(dv  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp') + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1 , data = fl_collapsed)     %>% summary
gam(dv  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp') + s(flood_depth), data = fl_collapsed)     %>% summary
fl_collapsed = fl_out %>% group_by(svy_sh_tsp_code, flood_affected_prop_villages, X, Y, risk_pop_1, risk_pop_2, risk_pop_3, risk_pop_4, flood_depth) %>%
summarize(dv = mean(svy_sh_anti_muslim_prejudice_bogardus, na.rm = T),
n = n())
gam(dv  ~  flood_affected_prop_villages + te(X, Y, k = 3, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages +  s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
gam(dv  ~  flood_affected_prop_villages + s(X, Y, k = 3, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X, Y, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages + te(X, Y, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X, Y, bs = 'sos') + risk_pop_4, data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X, Y, bs = 'sos') + risk_pop_4 + risk_pop_3, data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
gam(dv  ~  flood_affected_prop_villages + risk_pop_4 + risk_pop_3, data = fl_collapsed, weights = fl_collapsed$n)     %>% summary
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 ,
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3  + risk_pop_2 + risk_pop_1 + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3)  + splines::ns(flood_depth, df = 3),
cluster =  ~ svy_sh_tsp_code, data = fl_out)
feols(svy_sh_anti_muslim_prejudice_average  ~  flood_affected_prop_villages + risk_pop_4,
vcov = vcov_conley(), data = fl_out)
fl_out <-
analysis_df %>%
filter(svy_sh_religion_rc == "Buddhist") %>%
mutate(ag_lab = (svy_sh_income_source_rc %in%c("Agriculture", "Day Labour"))*1) %>%
left_join(twp_risk_out, by = c("svy_sh_tsp_code" = "TS_PCODE")) %>%
left_join(tp_centroids, by = 'svy_sh_tsp_code') %>%
mutate(latitude = Y, longitude = X)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3)  + splines::ns(flood_depth, df = 3),
vcov = vcov_conley(), data = fl_out)
?vcov_conley
feols(svy_sh_anti_muslim_prejudice_average  ~  flood_affected_prop_villages + risk_pop_4,
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3)  + splines::ns(flood_depth, df = 3),
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4+ splines::ns(flood_depth, df = 3),
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + splines::ns(flood_depth, df = 3),
vcov = vcov_conley(cutoff = 200), data = fl_out)
twp_risk = exact_extract(jrc_100_2, town_maps_raw, "frac")
twp_risk_pop = exact_extract(jrc_100_2, town_maps_raw, "weighted_frac", weights = pop)
twp_risk_crop = exact_extract(jrc_100_2, town_maps_raw, "weighted_frac", weights = crops)
twp_depth = exact_extract(jrc_100, town_maps_raw, "weighted_mean", weights = pop)
names(twp_risk) = paste0('risk_area_', 0:4)
names(twp_risk_pop) = paste0('risk_pop_', 0:4)
names(twp_risk_crop) = paste0('risk_crop_', 0:4)
twp_risk_out = bind_cols(twp_risk, twp_risk_pop, twp_risk_crop)
twp_risk_out$TS_PCODE = town_maps_raw$TS_PCODE
twp_risk_out$flood_depth = twp_depth
saveRDS(twp_risk_out, "../cleaned-data/flood_control_jrc.RDS")
twp_risk_out = readRDS("../cleaned-data/flood_control_jrc.RDS")
# load main analysis data
analysis_df <-
readRDS("../../02-replication/analysis_df.rds")
tp_centroids =   town_maps_raw$geometry %>% st_centroid(.) %>% st_coordinates() %>% as_tibble %>%
mutate(svy_sh_tsp_code = town_maps_raw$TS_PCODE)
fl_out <-
analysis_df %>%
filter(svy_sh_religion_rc == "Buddhist") %>%
mutate(ag_lab = (svy_sh_income_source_rc %in%c("Agriculture", "Day Labour"))*1) %>%
left_join(twp_risk_out, by = c("svy_sh_tsp_code" = "TS_PCODE")) %>%
left_join(tp_centroids, by = 'svy_sh_tsp_code') %>%
mutate(latitude = Y, longitude = X)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + splines::ns(flood_depth, df = 3),
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3) + splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = vcov_conley(cutoff = 200), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = vcov_conley(cutoff = 100), data = fl_out)
feols(svy_sh_anti_muslim_prejudice_bogardus  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
cluster = ~ svy_sh_tsp_code, data = fl_out)
fl_collapsed = fl_out %>% group_by(svy_sh_tsp_code, flood_affected_prop_villages, X, Y, risk_pop_1, risk_pop_2, risk_pop_3, risk_pop_4, flood_depth) %>%
summarize(dv = mean(svy_sh_anti_muslim_prejudice_bogardus, na.rm = T),
n = n())
eols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = "hc1", data = fl_out)
feols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = "hc1", data = fl_out)
feols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = "hc1", data = fl_collapsed)
feols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = "hc1", data = fl_collapsed)
feols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + risk_pop_4 + risk_pop_3 + risk_pop_2 + risk_pop_1,
vcov = "hc1", data = fl_collapsed, weights = ~n)
feols(dv  ~  flood_affected_prop_villages + splines::ns(X, df = 3)*splines::ns(Y, df = 3) + splines::ns(flood_depth, df = 3),
vcov = "hc1", data = fl_collapsed, weights = ~n)
require(lmtest)
install.packages('lmtest')
require(lm(test))
require(lmtest)
gam(dv  ~  flood_affected_prop_villages + s(X,Y, bs = 'sos') + s(flood_depth, risk_pop_4). data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC)
gam(dv  ~  flood_affected_prop_villages + s(X,Y, bs = 'sos') + s(flood_depth, risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC)
require(sandwich)
gam(dv  ~  flood_affected_prop_villages + s(X,Y, bs = 'sos') + s(flood_depth, risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC)
?coeftest
gam(dv  ~  flood_affected_prop_villages + s(X,Y, bs = 'sos') + s(flood_depth, risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 3 bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 3, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC2')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC2')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y,risk_pop_4, k = 5, bs = 'tp') , data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y,risk_pop_4, k = 3, bs = 'tp') , data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y,flood_depth, k = 3, bs = 'tp') , data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y, k = 5, bs = 'tp') + s(risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y, k = 4, bs = 'tp') + s(risk_pop_4), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y, k = 4, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + te(X,Y, k = 3, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 3, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n)     %>% coeftest(vcov. = vcovHC, type = 'HC1')
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'sos') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 3, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 4, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 5, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 6, bs = 'tp') + s(flood_depth), data = fl_collapsed, weights = fl_collapsed$n) %>% summary
gam(dv  ~  flood_affected_prop_villages + s(X,Y, k = 6, bs = 'tp') + flood_depth, data = fl_collapsed, weights = fl_collapsed$n) %>% summary
<img src="./oranges_1.webp" width=80%>
require(png)
require(reticulate)
require(png)
use_python("/usr/bin/python")
reticulate::repl_python()
require(httr)
require(rvest)
form_url = 'http://www.dalbydata.com/user.php?'
form = list(CivWarSearch = 'Search', lastname = 'b')
response = POST(form_url, form)
content(response)
content(response, type = 'text')
form_url = 'http://www.dalbydata.com/user.php?'
form = list(CivWarSearch = 'Search', lastname = 'b')
response = POST(form_url, body = form, encode = 'form')
content(response)
content(response, type = 'text')
form_url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
form = list(CivWarSearch = 'Search', lastname = 'b')
response = POST(form_url, body = form, encode = 'form')
content(response)
content(response, type = 'text')
response = POST(form_url, body = form)
content(response, type = 'text')
content(response) %>% html_table()
?html_attrs
?html_node
content(response) %>% html_nodes("table")
content(response) %>% html_nodes("table[cellpadding=2]")
content(response) %>% html_nodes("table[cellpadding='2']")
content(response) %>% html_nodes("table[cellpadding='2']") %>% html_table()
#Define request URL
url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
#Form
form = list(CivWarSearch = 'Search', lastname = 'b')
#Get response
response = POST(url, body = form)
content(response, type = text) %>% cat
#Define request URL
url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
#Form
form = list(CivWarSearch = 'Search', lastname = 'b')
#Get response
response = POST(url, body = form)
content(response, type = 'text') %>% cat
url = "https://en.wikipedia.org/w/index.php?title=Category:Ships_of_the_Union_Navy"
response = GET(url)
content(response)
page %>% html_nodes("div[class='mw-category mw-category-columns'")
url = "https://en.wikipedia.org/w/index.php?title=Category:Ships_of_the_Union_Navy"
response = GET(url)
page = content(response)
page %>% html_nodes("div[class='mw-category mw-category-columns'")
page %>% html_nodes("div[class='mw-category mw-category-columns']")
div = page %>% html_nodes("div[class='mw-category mw-category-columns']")
div %>% cat
div = page %>% html_nodes("div[class='mw-category mw-category-columns']")
div %>% print
install.packages('httr2')
require(httr2)
url = "https://en.wikipedia.org/w/index.php?title=Category:Ships_of_the_Union_Navy"
req = request(url)
response = req %>% req_perform()
response
content(response)
page = response %>% resp_body_html()
page
div = page %>% html_nodes("div[class='mw-category mw-category-columns']")
div %>% print
xml_text(div)
xml2::xml_text(div)
div
div[1]
div[1] %>% print
div[1] %>% cat
div[1] %>% unlist
print(ships)
ships = div %>% html_nodes("a")
print(ships)
for (s in ships) {
s %>% html_attr('href')
s %>% html_text
}
for (s in ships) {
s %>% html_attr('href') %>% print
s %>% html_text %>% print
}
for (s in ships) {
s %>% html_attr('href') %>% paste0("https://en.wikipedia.org", .)
s %>% html_text %>% print
}
for (s in ships) {
s %>% html_attr('href') %>% paste0("https://en.wikipedia.org", .) %>% print
s %>% html_text %>% print
}
lapply(ships, function(s)
data.table(url = s %>% html_attr('href') %>% paste0("https://en.wikipedia.org", .),
ship_name = s %>% html_text)
) %>% rbindlist()
require(data.table)
lapply(ships, function(s)
data.table(url = s %>% html_attr('href') %>% paste0("https://en.wikipedia.org", .),
ship_name = s %>% html_text)
) %>% rbindlist()
#Define request URL
url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
#Form
form_data = list(CivWarSearch = 'Search', lastname = 'b')
#Request
req = request(url)
response = req %>%
req_body_form(form_data)
?req_body_form
#Define request URL
url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
#Request
req = request(url)
response = req %>%
req_body_form(CivWarSearch = 'Search',
lastname = 'b')
req_perform()
#Define request URL
url = 'http://www.dalbydata.com/user.php?action=civwarsearchresults'
#Request
req = request(url)
response = req %>%
req_body_form(CivWarSearch = 'Search',
lastname = 'b') %>%
req_perform()
page = response %>% resp_body_html()
page
?req_perform
page %>% html_nodes("table")
page %>% html_nodes("table[cellspacing='1']")
page %>%
html_nodes("table[cellspacing='1']") %>%
html_table
table_data = page %>%
html_nodes("table[cellspacing='1']") %>%
html_table
table_data
install.packages('tabulapdf')
install.packages('tabulapdf')
require(tabulapdf)
require(tabulapdf)
remove.packages('rJava')
install.packages('rJava')
remove.packages('tabulapdf')
install.packages('tabulapdf')
require(tabulapdf)
