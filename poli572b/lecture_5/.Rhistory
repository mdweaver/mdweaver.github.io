require(sp)
sp::plot(cway_sev$osm_lines)
sp::plot(cway_sev$osm_lines)
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_features(features = c ("\"name:en\"=\"Dundas Street East\"",
"\"name:en\"=\"Dundas Street West\""))
cway_sev <- osmdata_sp(q)
sp::plot(cway_sev$osm_lines)
cway_sev$osm_lines
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_features(key = 'name', value = "Dundas Street West")
cway_sev <- osmdata_sp(q)
sp::plot(cway_sev$osm_lines)
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_feature(key = 'name', value = "Dundas Street West")
cway_sev <- osmdata_sp(q)
sp::plot(cway_sev$osm_lines)
cway_sev$osm_lines
cway_sev$osm_lines %>% length
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_feature(key = 'name', value = "Dundas Street", value_exact = F)
cway_sev <- osmdata_sp(q)
sp::plot(cway_sev$osm_lines)
cway_sev$meta
opq_string(q)
cway_sev$osm_lines$name
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_feature(key = 'name', value = "Dundas Street", value_exact = F)
dundas_toronto <- osmdata_sp(q) %>% osmdata_sf()
q <- opq(bbox = 'Toronto, Canada') %>%
add_osm_feature(key = 'name', value = "Dundas Street", value_exact = F)
dundas_toronto <-  osmdata_sf(q)
dundas_toronto
dundas_toronto %>% plot
dundas_toronto$osm_lines %>% plot
dundas_toronto$osm_lines %>% sf::plot
dundas_toronto$osm_lines
dundas_toronto$osm_lines[[1]]
dundas_toronto$osm_lines %>% str
dundas_toronto$osm_lines %>% class
dundas_toronto$osm_lines$geometry
osmdata_sf(q) %>% .$osm_lines %>% st_union
require(sfheaders)
require(sf)
dundas_toronto <-  osmdata_sf(q) %>% .$osm_lines %>% st_union
dundas_toronto %>% plot
plot(rnorm(1000))
dundas_toronto %>% plot
dundas_toronto
dundas_toronto$geometry
spacy_initialize(model = "/home/mdweaver/Dropbox/civilWarPrizePaper/for_ben/spacy_attr/training_output/model_best",
python_executable = '/usr/bin/python3')
require(magrittr)
require(data.table)
require(stringr)
require(reticulate)
require(spacyr)
require(zoo)
require(lubridate)
spacy_initialize(model = "/home/mdweaver/Dropbox/civilWarPrizePaper/for_ben/spacy_attr/training_output/model_best",
python_executable = '/usr/bin/python3')
?set_spacy_python_option
??set_spacy_python_option
spacyr::spacy_download_langmodel_virtualenv
?spacyr::spacy_initialize
spacy_initialize(model = "/home/mdweaver/Dropbox/civilWarPrizePaper/for_ben/spacy_attr/training_output/model-best",
python_executable = '/usr/bin/python3')
spacy_initialize(model = "/home/mdweaver/Dropbox/civilWarPrizePaper/for_ben/spacy_attr/training_output/model-best")
spacy_download_langmodel
spacy_initialize(model = "usct_custom_model",
python_executable = '/usr/bin/python3')
11.06 * 45
497.7/43
11.57 / 15
2.5 * 0.7
require(httr)
?POST
require(jsonlite)
?toJSON
?POST
knitr::opts_chunk$set(echo = TRUE)
require(httr)
require(jsonlite)
body = list(format = 'json', compress = 'false')
toJSON(body)
body = c(format = 'json', compress = 'false')
body
toJSON(body)
?toJSON
body = list(format = 'json', compress = 'false')
toJSON(body, flatten = T)
toJSON(body, complex = 'string')
toJSON(body, auto_unbox = T)
key = "MuCKgxrhOZA0QPEbWDvYo8f8VkddlLO74wDOIngG"
survey_id = "SV_4NuTvbuzgFUVQ1g"
datacenter_id = "ca1"
base_url = paste0('https://',datacenter_id,'.qualtrics.com/API/v3/surveys/',survey_id)
post_url = paste0(base_url, '/export-responses')
body = list(format = 'json', compress = 'false')
z = POST(post_url,
body = toJSON(body, auto_unbox = T).
z = POST(post_url,
body = toJSON(body, auto_unbox = T),
add_headers('Content-Type' = 'application/json',
'X-API-TOKEN' =  key))
z
z$content
content(z. "text")
content(z, "text")
require(magrittr)
content(z, "text")  %>% fromJSON
z$status_code
key = "MuCKgxrhOZA0QPEbWDvYo8f8VkddlLO74wDOIngG"
survey_id = "SV_4NuTvbuzgFUVQ1g"
datacenter_id = "ca1"
base_url = paste0('https://',datacenter_id,'.qualtrics.com/API/v3/surveys/',survey_id)
start_export = function(url, key) {
post_url = paste0(base_url, '/export-responses')
body = list(format = 'json', compress = 'false')
r = POST(post_url,
body = toJSON(body, auto_unbox = T),
add_headers('Content-Type' = 'application/json',
'X-API-TOKEN' =  key))
if (r$status_code == 200) {
content(r, "text") %>% fromJSON %>% return
} else {
cat(r$status_code)
cat(content(r, "text"))
return(NULL)
}
}
status_export = function(url, export_id, key) {
get_url = paste0(base_url, '/export-responses/', export_id)
body = list(format = 'json', compress = 'false')
r = GET(get_url,
add_headers('Content-Type' = 'application/json',
'X-API-TOKEN' =  key))
if (r$status_code == 200) {
content(r, "text") %>% fromJSON %>% return
} else {
cat(r$status_code)
cat(content(r, "text"))
return(NULL)
}
}
started = start_export(base_url, key)
started
started$result$progressId
status_export(base_url, started$result$progressId, key)
?GET
data_export = function(url, file_id, key) {
get_url = paste0(base_url, '/export-responses/', file_id, '/file')
r = GET(get_url,
format = 'json', compress = 'false',
add_headers('Content-Type' = 'application/json',
'X-API-TOKEN' =  key))
if (r$status_code == 200) {
content(r, "text") %>% fromJSON %>% return
} else {
cat(r$status_code)
cat(content(r, "text"))
return(NULL)
}
}
status = status_export(base_url, started$result$progressId, key)
status
data = data_export(base_url, status$result$fileId, key)
data
get_schema = function(url, key) {
get_url = paste0(url, '/response-schema')
r = GET(get_url,
add_headers('Content-Type' = 'application/json',
'X-API-TOKEN' =  key))
if (r$status_code == 200) {
content(r, "text") %>% fromJSON %>% return
} else {
cat(r$status_code)
cat(content(r, "text"))
return(NULL)
}
}
key = "MuCKgxrhOZA0QPEbWDvYo8f8VkddlLO74wDOIngG"
survey_id = "SV_4NuTvbuzgFUVQ1g"
datacenter_id = "ca1"
survey_url = paste0('https://',datacenter_id,'.qualtrics.com/API/v3/surveys/',survey_id)
schema = get_schema(survey_url, key)
schema
schema$result$properties$values$properties$QID1_DO
schema$result$properties$values$properties$QID1_1
schema$result$properties$values$properties$QID1_2
schema$result$properties$values$properties$QID1_3
schema$result$properties$values$properties$QID1_DO
require(stringr)
'qid1' %>% str_to_upper
knit_with_parameters("~/Dropbox/ubc/rank_voting.Rmd")
knit_with_parameters("~/Dropbox/ubc/rank_voting.Rmd")
install.packages('votesys')
while (T) {
i = i + 1
cat(i)
if (i > 10) {break}
}
i = 0
while (T) {
i = i + 1
cat(i)
if (i > 10) {break}
}
status
status$result$status
data
schema
list(data schema)
out = list(data, schema)
??rmarkdown::render
data
out = list(data = data, schema = schema)
out
out$data
out$data %>% as.data.table
require(data.talbe)
require(data.table)
out$data %>% as.data.table
schema
qid
qid = "QID1"
responses = out$data %>% as.data.table
value_labels = out$schema$result$properties$values$properties[paste0(qid, "_DO")]
value_labels
value_labels
out$schema$result$properties$values$properties[paste0(qid, "_DO")]
#Load packages
knitr::opts_chunk$set(echo = TRUE)
packages = c('httr', 'jsonlite', 'magrittr', 'stringr', 'votesys', 'data.table')
invisible(
lapply(packages,
function(x) if (!require(x, character.only=T)) {
install.packages(x, repos = "https://mirror.rcg.sfu.ca/mirror/CRAN/");
library(x, character.only = T)
}
)
)
value_labels = out$schema$result$properties$values$properties[[paste0(qid, "_DO")]]
value_labels
nrow(value_labels$items$oneOf)
candidates_cols = paste(qid, seq_along(value_labels$items$oneOf$label))
responses
candidates_cols = paste(qid, seq_along(value_labels$items$oneOf$label), sep = "_") %>%
paste0('responses.values.', .)
candidate_cols
candidatse_cols
candidate_cols = paste(qid, seq_along(value_labels$items$oneOf$label), sep = "_") %>%
paste0('responses.values.', .)
candidate_cols
responses[, .SD, .SDcols = candidate_cols]
responses[, .SD, .SDcols = candidate_cols] %>% t
value_labels$items$oneOf$label
ballots = responses[, .SD, .SDcols = candidate_cols] %>% t
row.names(ballots) = value_labels$items$oneOf$label
ballots
apply(ballots, 1, function(x) x %>% sort %>% names)
apply(ballots, 2, function(x) x %>% sort %>% names)
apply(ballots, 2, function(x) x %>% sort %>% names) %>% t
responses[, list(.SD), .SDcols = candidate_cols]
responses[, list(.SD), .SDcols = candidate_cols]
responses[, list(value_labels$items$oneOf$label = .SD), .SDcols = candidate_cols]
ballots = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t
ballots
ballots = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
apply(., 2, function(x) x %>% sort %>% names) %>%
t
ballots
?list2ballot
list2ballot(m = ballots)
m <- matrix(c(1, 2, 3, 3, 1, 2), nrow = 2, byrow = TRUE)
m
list2ballot((m = m))
list2ballot(m = m)
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>% as.data.table
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>% as.data.table(keep.rownames = T)
?sort
sort.int(c(2,3,4,5,1), index.return = Y)
sort.int(c(2,3,4,5,1), index.return = T)
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i)]), .SDcols = -1]
apply(., 2, function(x) x %>% sort %>% names) %>%
t
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i)]), .SDcols = -1]
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i)$ix]), .SDcols = -1]
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i, index.return = T)$ix]), .SDcols = -1]
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i, index.return = T)$ix]), .SDcols = -1] %>%
as.list
ballots = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i, index.return = T)$ix]), .SDcols = -1] %>%
as.list
list2ballot(ballots)
ballots = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
t %>%
as.data.table(keep.rownames = T) %>%
.[, lapply(.SD, function(i) rn[sort.int(i, index.return = T)$ix]), .SDcols = -1] %>%
as.list %>%
list2ballot()
votesys::cdc_rankedpairs(ballots)
?list2ballot
?cdc_rankedpairs
?create_vote
create_vote(ballots)
create_vote(ballots, candidate = value_labels$items$oneOf$label)
create_vote(ballots, xtype = 3,  candidate = value_labels$items$oneOf$label)
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label)
ballots = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label)
ballot
ballota
ballots
create_vote(ballots %>% as.matrix)
create_vote(ballots %>% as.matrix)
create_vote(ballots %>% as.matrix, xtype = 1)
v = create_vote(ballots %>% as.matrix, xtype = 1)
cdc_rankedpairs(v)
ballots
v = create_vote(ballots %>% as.matrix, xtype = 1)
v
cdc_schulze(v)
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
as.matrix
responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
as.matrix %>%
create_vote(., xtype = 1)
?cdc_rankedpairs
vote = responses[, .SD, .SDcols = candidate_cols] %>%
setnames(., value_labels$items$oneOf$label) %>%
as.matrix %>%
create_vote(., xtype = 1)
cdc_rankedpairs(vote)
?vote
vote$dif
?create_vote
vote$cdc
vote$cdc / 3
cdc_rankedpairs(vote)
cdc_condorcet(vote)
cdc_simple(vote)
cdc_simple(vote)$cd
cdc_simple(vote)$cdc
z = cdc_simple(vote)
z
?cdc_simple
z$summary_m
z$summary_m[,3]
z$summary_m[,3] %>% sort
sort(c(1,2,3,4,5,5))
cdc_schulze(vote)
z
z = cdc_rankedpairs(vote)
z
setwd("/home/mdweaver/git/mdweaver.github.io/poli572b/lecture_5")
require(data.table)
elections = fread('./closeElectionBalanceData.csv')
panel = fread('./analysisPanelBW1.csv')
require(knitr)
require(magrittr)
require(kableExtra)
require(ggplot2)
require(grid)
require(data.table)
require(UsingR)
require(lfe)
options("kableExtra.html.bsTable" = T)
require(ggplot2)
elections
panel
elections
panel$COUNT > 0
elections$rd_INC_mov
require(magrittr)
elections = fread('./closeElectionBalanceData.csv') %>%
.[, list(DISTRICT_ID_61, year, rd_INC_mov)]
panel = fread('./analysisPanelBW1.csv') %>%
.[, list(DISTRICT_ID_61, year = election_year, riot = COUNT > 0)]
use = elections[panel]
elections = fread('./closeElectionBalanceData.csv') %>%
.[, list(id = DISTRICT_ID_61, year, rd_INC_mov)]
panel = fread('./analysisPanelBW1.csv') %>%
.[, list(id = DISTRICT_ID_61, year = election_year, riot = COUNT > 0)]
setkey(elections, id, year)
setkey(panel, id, year)
use = elections[panel]
use
use[, mov := round(rd_INC_mov, 1)]
use[!is.na(mov) & !is.na(riot), list(n = .N, riot = mean(riot, na.rm = T)), by = mov]
use = use[!is.na(mov) & !is.na(riot), list(n = .N, riot = mean(riot, na.rm = T)), by = mov]
use
ggplot(use, aes(x = mov, y = riot)) + geom_point()
ggplot(use, aes(x = mov, y = riot, size = n, weight = n)) +
geom_point() +
theme_bw()
ggplot(use, aes(x = mov, y = riot, size = n, weight = n)) +
geom_point(alpha = 0.1) +
theme_bw()
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n)) +
geom_point(alpha = 0.1) +
theme_bw()
use[, inc_win := mov > 0]
use = elections[panel]
use[, inc_win := rd_INC_mov > 0]
use[, mov := round(rd_INC_mov, 1)]
use = use[!is.na(mov) & !is.na(riot), list(n = .N, riot = mean(riot, na.rm = T)), by = list(mov, inc_win)]
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.1) +
theme_bw()
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.1) +
geom_smooth()
theme_bw()
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.1) +
geom_smooth() +
theme_bw()
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth() +
theme_bw()
?geom_smooth
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth(span = 0.1) +
geom_vline(xintercept = 0) +
theme_bw() +
xlab("INC Margin of Victory") +
ylab("Pr(Riot)")
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth(span = 0.3) +
geom_vline(xintercept = 0) +
theme_bw() +
xlab("INC Margin of Victory") +
ylab("Pr(Riot)")
panel
use
use = elections[panel]
use
use = elections[panel]
use[, wt := 1/.N, by = id]
use = elections[panel]
use[, wt := 1/.N, by = id]
use[, inc_win := rd_INC_mov > 0]
use[, mov := round(rd_INC_mov, 1)]
use = use[!is.na(mov) & !is.na(riot), list(n = sum(wt), riot = weighted.mean(riot, wt, na.rm = T)), by = list(mov, inc_win)]
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth(span = 0.3) +
geom_vline(xintercept = 0) +
theme_bw() +
xlab("INC Margin of Victory") +
ylab("Pr(Riot)")
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth(span = 0.5) +
geom_vline(xintercept = 0) +
theme_bw() +
xlab("INC Margin of Victory") +
ylab("Pr(Riot)")
use = elections[panel]
use[, wt := 1/.N, by = id]
use[, inc_win := rd_INC_mov > 0]
use[, mov := round(rd_INC_mov, 1)]
use = use[!is.na(mov) & !is.na(riot), list(n = sum(wt), riot = weighted.mean(riot, wt, na.rm = T)), by = list(mov, inc_win)]
ggplot(use[mov %between% c(-10,10)], aes(x = mov, y = riot, size = n, weight = n, color = inc_win)) +
geom_point(alpha = 0.3) +
geom_smooth(span = 0.3) +
geom_vline(xintercept = 0) +
theme_bw() +
xlab("INC Margin of Victory") +
ylab("Pr(Riot)")
