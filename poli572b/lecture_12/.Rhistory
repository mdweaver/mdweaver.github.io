a = rnorm(100)
y = rnorm(100)
m = lm(y ~ a)
coefs(m)
coef(m)
?modelsummary
require(modelsummary)
?modelsummary
veterans = structure(list(state = c("IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA", "IOWA",
"IOWA", "IOWA", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN", "WISCONSIN",
"WISCONSIN", "WISCONSIN"), county = c("ADAIR", "ADAMS", "ALLAMAKEE",
"APPANOOSE", "AUDUBON", "BENTON", "BLACK HAWK", "BOONE", "BREMER",
"BUCHANAN", "BUTLER", "CALHOUN", "CARROLL", "CASS", "CEDAR",
"CERRO GORDO", "CHICKASAW", "CLARKE", "CLAYTON", "CLINTON", "CRAWFORD",
"DALLAS", "DAVIS", "DECATUR", "DELAWARE", "DES MOINES", "DUBUQUE",
"FAYETTE", "FLOYD", "FRANKLIN", "FREMONT", "GREENE", "GRUNDY",
"GUTHRIE", "HAMILTON", "HARDIN", "HARRISON", "HENRY", "HOWARD",
"IOWA", "JACKSON", "JASPER", "JEFFERSON", "JOHNSON", "JONES",
"KEOKUK", "KOSSUTH", "LEE", "LINN", "LOUISA", "MADISON", "MAHASKA",
"MARION", "MARSHALL", "MILLS", "MITCHELL", "MONONA", "MONROE",
"MONTGOMERY", "MUSCATINE", "PAGE", "POLK", "POTTAWATTAMIE", "POWESHIEK",
"RINGGOLD", "SAC", "SCOTT", "SHELBY", "STORY", "TAMA", "TAYLOR",
"UNION", "VAN BUREN", "WAPELLO", "WARREN", "WASHINGTON", "WEBSTER",
"WINNESHIEK", "WRIGHT", "ADAMS", "BROWN", "BUFFALO", "CALUMET",
"CHIPPEWA", "CLARK", "COLUMBIA", "CRAWFORD", "DANE", "DODGE",
"DOOR", "DOUGLAS", "DUNN", "EAU CLAIRE", "FOND DU LAC", "GRANT",
"GREEN", "IOWA", "JACKSON", "JEFFERSON", "JUNEAU", "KENOSHA",
"KEWAUNEE", "LA CROSSE", "LAFAYETTE", "MANITOWOC", "MARATHON",
"MARQUETTE", "MILWAUKEE", "MONROE", "OCONTO", "OUTAGAMIE", "OZAUKEE",
"PIERCE", "POLK", "PORTAGE", "RACINE", "RICHLAND", "ROCK", "SAUK",
"SHAWANO", "SHEBOYGAN", "ST. CROIX", "TREMPEALEAU", "WALWORTH",
"WASHINGTON", "WAUKESHA", "WAUPACA", "WAUSHARA", "WINNEBAGO",
"WOOD"), mil_age = c(324L, 504L, 3750L, 3659L, 153L, 2741L, 2612L,
1313L, 1592L, 2504L, 1171L, 49L, 81L, 580L, 4311L, 322L, 1309L,
1690L, 6786L, 6242L, 111L, 1644L, 4245L, 2703L, 3455L, 6191L,
9658L, 3749L, 1237L, 424L, 1760L, 421L, 275L, 1012L, 555L, 1707L,
1191L, 5843L, 1017L, 2595L, 5792L, 3138L, 4739L, 5612L, 4314L,
4194L, 140L, 9297L, 6056L, 3386L, 2207L, 4661L, 5109L, 1880L,
1537L, 1195L, 284L, 2554L, 424L, 5419L, 1467L, 3650L, 1652L,
1738L, 884L, 87L, 8492L, 253L, 1176L, 1711L, 1144L, 620L, 5684L,
4494L, 3158L, 4537L, 797L, 4361L, 201L, 1620L, 2905L, 1120L,
2016L, 751L, 253L, 6604L, 2122L, 11649L, 11044L, 818L, 249L,
1085L, 1191L, 8768L, 8399L, 5263L, 4806L, 1269L, 7395L, 2320L,
3792L, 1564L, 3783L, 4784L, 5369L, 962L, 2092L, 15717L, 2279L,
1521L, 2585L, 3553L, 1444L, 410L, 2079L, 5393L, 2546L, 10347L,
4803L, 253L, 6299L, 1546L, 770L, 6915L, 5472L, 6951L, 2311L,
2262L, 6302L, 907L), veterans = c(100L, 169L, 925L, 1169L, 50L,
926L, 1276L, 236L, 376L, 736L, 475L, 45L, 21L, 136L, 1090L, 149L,
296L, 608L, 1547L, 1787L, 37L, 506L, 1098L, 790L, 805L, 2280L,
2249L, 959L, 274L, 189L, 451L, 304L, 41L, 288L, 180L, 499L, 314L,
2064L, 250L, 799L, 1500L, 1288L, 1321L, 2187L, 1091L, 1111L,
48L, 2735L, 2147L, 1170L, 846L, 1440L, 1720L, 848L, 401L, 291L,
63L, 781L, 94L, 2195L, 457L, 1729L, 509L, 707L, 334L, 29L, 2843L,
50L, 383L, 506L, 316L, 198L, 1436L, 1906L, 1148L, 1588L, 346L,
869L, 83L, 585L, 1244L, 608L, 798L, 434L, 104L, 2192L, 1113L,
4940L, 3173L, 320L, 68L, 739L, 497L, 3107L, 3410L, 1958L, 1611L,
547L, 3164L, 771L, 1352L, 508L, 1490L, 1602L, 1371L, 470L, 565L,
6537L, 1098L, 854L, 1284L, 873L, 860L, 437L, 705L, 2384L, 1283L,
3675L, 1343L, 187L, 1863L, 915L, 394L, 2866L, 1511L, 2391L, 926L,
763L, 2459L, 322L), suff65_yes = c(0.610619469026549, 0.644182124789207,
0.4979633401222, 0.475499092558984, 0.405940594059406, 0.60707635009311,
0.674071908798597, 0.515910055154858, 0.656374501992032, 0.63867047891351,
0.632944228274968, 0.555555555555556, 0.289915966386555, 0.510479041916168,
0.56790444040509, 0.750972762645914, 0.575857519788918, 0.583333333333333,
0.530939809926082, 0.511569506726457, 0.487730061349693, 0.612255965292842,
0.435836177474403, 0.404015670910872, 0.616366612111293, 0.462251655629139,
0.340868530636526, 0.594015748031496, 0.698101653398653, 0.787878787878788,
0.385624089363769, 0.489296636085627, 0.770247933884298, 0.523461939520334,
0.678260869565217, 0.667138142385667, 0.427283653846154, 0.579563182527301,
0.586337760910816, 0.492087415222306, 0.430117873466442, 0.629620441577772,
0.528714107365793, 0.439241395457738, 0.60699755899105, 0.505085730892183,
0.958563535911602, 0.390497520396737, 0.645485584218513, 0.56906779661017,
0.535510204081633, 0.545345200866009, 0.445094509450945, 0.73728813559322,
0.490308686288586, 0.70952380952381, 0.558659217877095, 0.542896050839764,
0.524054982817869, 0.535601458080194, 0.546099290780142, 0.575862817451704,
0.393897364771151, 0.596689543802988, 0.581185567010309, 0.632768361581921,
0.605581395348837, 0.414893617021277, 0.62525320729237, 0.627296587926509,
0.599229287090559, 0.503571428571429, 0.46420704845815, 0.464467005076142,
0.57624175060785, 0.57519934011548, 0.536964980544747, 0.649174528301887,
0.629139072847682, 0.728956228956229, 0.29600626468285, 0.675757575757576,
0.449856733524355, 0.410501193317422, 0.396551724137931, 0.551735537190083,
0.255767301905717, 0.457471647765177, 0.379637331558809, 0.623955431754875,
0.260416666666667, 0.481418918918919, 0.458856345885635, 0.466588739528541,
0.513335245196444, 0.593163216177179, 0.368831168831169, 0.503322259136213,
0.424092409240924, 0.380368098159509, 0.612018288700196, 0.158823529411765,
0.46974697469747, 0.364942528735632, 0.311967395331604, 0.0544554455445545,
0.359451518119491, 0.284998608405232, 0.522984676882079, 0.380610412926391,
0.372037914691943, 0.109994711792702, 0.505277044854881, 0.562790697674419,
0.421164021164021, 0.51880276285495, 0.381866313699537, 0.671021377672209,
0.623713646532439, 0.402439024390244, 0.464110127826942, 0.582298136645963,
0.778048780487805, 0.753318584070796, 0.212941176470588, 0.45798755186722,
0.586161879895561, 0.664596273291926, 0.585243974132863, 0.303225806451613
), suff57_yes = c(0.122950819672131, 0.0941176470588235, 0.155306298533218,
0.0332980972515856, 0.0405405405405405, 0.0950734658599827, 0.0668296658516707,
0.0639204545454545, 0.198177676537585, 0.246753246753247, 0.224806201550388,
0, 0.0222222222222222, 0, 0.187088274044796, 0.373493975903614,
0.132846715328467, 0.0250297973778308, 0.105705440070765, 0.131048387096774,
0.087719298245614, 0.151732377538829, 0.0157657657657658, 0.0233853006681515,
0.159693165969317, 0.0608863198458574, 0.0281030444964871, 0.238636363636364,
0.345098039215686, 0.120418848167539, 0.0662768031189084, 0.0157894736842105,
0.241758241758242, 0.185589519650655, 0.170818505338078, 0.0997652582159624,
0.0179948586118252, 0.112083105522143, 0.158567774936061, 0.110985277463194,
0.0639324487334138, 0.102522375915378, 0.155188679245283, 0.060361216730038,
0.228149100257069, 0.0949612403100775, 0.487804878048781, 0.0857480780603193,
0.23474801061008, 0.102476515798463, 0.0366900858704137, 0.0695216907675195,
0.0107334525939177, 0.180045871559633, 0.0317195325542571, 0.513618677042802,
0.136054421768708, 0.0490748189863234, 0, 0.102863202545069,
0.1019955654102, 0.0325325325325325, 0.0102639296187683, 0.0640732265446224,
0.0300429184549356, 0.0454545454545455, 0.132906626506024, 0.0350877192982456,
0.0203442879499218, 0.206140350877193, 0.0132275132275132, 0.0380952380952381,
0.0365758754863813, 0.0361225422953818, 0.0378421900161031, 0.21419185282523,
0.155172413793103, 0.445246690734055, 0.0900900900900901, 0.51528384279476,
0.124437781109445, 0.226102941176471, 0.591019417475728, 0.128205128205128,
0.85, 0.529665230361286, 0.242811501597444, 0.29176782167292,
0.347126436781609, 0.306666666666667, 0.012987012987013, 0.338624338624339,
0.193370165745856, 0.508693361433087, 0.154503105590062, 0.512144702842377,
0.249226963512678, 0.372307692307692, 0.610719322990127, 0.30880829015544,
0.514435695538058, 0.025974025974026, 0.381729200652529, 0.12888198757764,
0.298735511064278, 0.0601503759398496, 0.453190676346962, 0.215394483643361,
0.512873326467559, 0.192090395480226, 0.321389793702497, 0.11016393442623,
0.0588235294117647, 0.120481927710843, 0.146800501882058, 0.532010243277849,
0.283700440528634, 0.644880615135573, 0.578907435508346, 0.5,
0.498374361356247, 0.28, 0.711764705882353, 0.674688315453755,
0.169779286926995, 0.543665436654367, 0.602629656683711, 0.705685618729097,
0.580683156654888, 0.181818181818182)), row.names = c(NA, -130L
), class = "data.frame")
veterans
require(magrittr)
require(data.table)
veterans = veterans %>% as.data.table
veterans
m = lm(suff65_yes ~ enlist_rate + suff57_yes + state, data = veterans)
veterans[, enlist_rate := veterans/mil_age]
m = lm(suff65_yes ~ enlist_rate + suff57_yes + state, data = veterans)
m
m$call
m$terms
m$terms[1]
m$terms %>% str
m$terms['formula']
k = 1000
bs = data.frame(i = rep(NA, k),
beta_hat = rep(NA, k))
bs
bs = data.table(i = rep(NA, k),
beta_hat = rep(NA, k))
1:k
for (i in 1:k) {
print(i)
}
idx = 1:nrow(veterans)
idx
bs_idx = sample(idx, replace = T)
sample(idx, replace = T)
sample(idx, replace = T) %>% table
sample(idx, replace = T) %>% table
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
bs_m
coef(bs_m)
coef(bs_m)[2]
i = 1
list(i, coef(bs_m)[2])
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[, c('i', 'beta_hat') := list(i, coef(bs_m)[2])]
}
warnings()
bs = data.table(i = rep(NA_integer_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[, c('i', 'beta_hat') := list(i, coef(bs_m)[2])]
}
bs
bs
bs = data.table(i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[, c('i', 'beta_hat') := list(i, coef(bs_m)[2])]
}
bs
bs
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[i, c('i', 'beta_hat') := list(i, coef(bs_m)[2])]
}
bs
bs
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[i, c('i', 'beta_hat') := list(i, coef(bs_m)[2])]
bs[i, ] = c(i, coef(bs_m)[2])
}
bs
bs = data.table(i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
bs[, i]
bs = data.table(bs_i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[i, c('bs_i', 'beta_hat') := list(i, coef(bs_m)[2])]
bs[i, ] = c(i, coef(bs_m)[2])
}
bs = data.table(bs_i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[i, c('bs_i', 'beta_hat') := list(i, coef(bs_m)[2])]
#bs[i, ] = c(i, coef(bs_m)[2])
}
bs
bs
bs$beta_hat %>% bist
bs$beta_hat %>% hist
bs$beta_hat %>% hist
k = 5000
bs = data.table(bs_i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
for (i in 1:k) {
#make bootstrap replicate data
##############################
cat(i)
cat('\r')
#get idx of rows
bs_idx = sample(idx, replace = T)
#create bs_data
bs_data = veterans[bs_idx,]
#estimate model
bs_m = lm(suff65_yes ~ enlist_rate + suff57_yes + state,
data = bs_data)
#save results
bs[i, c('bs_i', 'beta_hat') := list(i, coef(bs_m)[2])]
#bs[i, ] = c(i, coef(bs_m)[2])
}
bs$beta_hat %>% hist
abline(v = m$coefficients[2])
sd(bs$beta_hat)
quantile(bs$beta_hat, probs = c(0.025, 0.975))
bs$beta_hat %>% `<=` (0) %>% mean
veterans = veterans %>% as.data.frame
bs = data.frame(bs_i = rep(NA_real_, k),
beta_hat = rep(NA_real_, k))
idx = 1:nrow(veterans)
