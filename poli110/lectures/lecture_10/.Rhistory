#load packages
require(data.table)
require(foreign)
require(stringr)
require(ineq)
require(magrittr)
require(stringdist)
#ICPSR state codes
state_fips_icpsr = fread('/home/mdweaver/Dropbox/County Data/state_fips_icpsr.csv')
state_fips_icpsr[, state_code := STICPSR %>% as.numeric]
state_fips_icpsr = state_fips_icpsr[, list(state_code, state_name = STNAME)]
#County boundary crosswalk
boundary_crosswalk = fread('/home/mdweaver/Dropbox/County Data/boundaries/2000_county_crosswalk.csv') %>%
.[pct_from_in_target > 0 & pct_target_in_from > 0]
boundary_crosswalk
boundary_crosswalk$target_fips %>% unique
boundary_crosswalk$target_fips %>% unique %>% length
boundary_crosswalk = fread('/home/mdweaver/Dropbox/County Data/boundaries/2000_county_crosswalk.csv') %>%
.[pct_from_in_target > 0 & pct_target_in_from > 0]
boundary_crosswalk$target_fips %>% unique %>% length
#County boundary crosswalk
boundary_crosswalk = fread('/home/mdweaver/Dropbox/County Data/boundaries/2000_county_crosswalk.csv') %>%
.[pct_from_in_target > 0 & pct_target_in_from > 0]
boundary_crosswalk$target_fips %>% unique %>% length
boundary_crosswalk
boundary_crosswalk$pct_target_in_from %>% hist
d = 1880
d = as.Date(paste0(y, '-01-01'))
y = 1880
d = as.Date(paste0(y, '-01-01'))
d
boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp[, near_perfect := pct_from_in_target >= 0.95]
temp
temp$from_fips
temp$from_id
temp[, any_near_perfect := any(near_perfect), by = from_id]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := c(0,0)]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := list(0,0)]
temp
temp[(near_perfect) & (any_near_perfect), pct_from_in_target := 1]
temp[pct_from_in_target < 0.01]
temp[pct_target_in_from < 0.01]
temp = temp[pct_target_in_from >= 0.01 & pct_from_in_target >= 0.01]
temp
d = as.Date(paste0(y, '-01-01'))
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp[, near_perfect := pct_from_in_target >= 0.95]
temp[, any_near_perfect := any(near_perfect), by = from_id]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := list(0,0)]
temp[(near_perfect) & (any_near_perfect), pct_from_in_target := 1]
temp = temp[pct_target_in_from >= 0.01 & pct_from_in_target >= 0.01]
temp[, pct_from_in_target := pct_from_in_target/sum(pct_from_in_target) , by = from_id]
temp[, pct_target_in_from := pct_target_in_from/sum(pct_target_in_from) , by = target_id]
temp
temp$pct_target_in_from %>% hist
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp[, near_perfect := pct_from_in_target >= 0.95]
temp[, any_near_perfect := any(near_perfect), by = from_id]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := list(0,0)]
temp[(near_perfect) & (any_near_perfect), pct_from_in_target := 1]
temp[, pct_from_in_target := sum(pct_from_in_target) , by = from_id]
temp[, pct_target_in_from := sum(pct_target_in_from) , by = target_id]
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp[, near_perfect := pct_from_in_target >= 0.95]
temp[, any_near_perfect := any(near_perfect), by = from_id]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := list(0,0)]
temp[(near_perfect) & (any_near_perfect), pct_from_in_target := 1]
temp[, test1 := sum(pct_from_in_target) , by = from_id]
temp[, test2 := sum(pct_target_in_from) , by = target_id]
temp$test1
temp$test1 %>% hits
temp$test1 %>% hist
temp$test2 %>% hist
temp[test2 > 1]
temp[test2 > 1.1]
setkey(temp, target_id)
temp[test2 > 1.1]
temp[test2 > 1.1]
boundary_crosswalk = fread('/home/mdweaver/Dropbox/County Data/boundaries/1860_county_crosswalk.csv') %>%
.[pct_from_in_target > 0 & pct_target_in_from > 0]
boundary_crosswalk[is.na(from_fips)]
cross_walk_list = vector('list', length = 3)
names(cross_walk_list) = seq(1880,1900,10) %>% as.character
for (y in seq(1880,1900, 10)) {
d = as.Date(paste0(y, '-01-01'))
temp = boundary_crosswalk[from_start_date <= d & from_end_date >= d]
temp[, near_perfect := pct_from_in_target >= 0.95]
temp[, any_near_perfect := any(near_perfect), by = from_id]
temp[!(near_perfect) & (any_near_perfect), c('pct_from_in_target', 'pct_target_in_from') := list(0,0)]
temp[(near_perfect) & (any_near_perfect), pct_from_in_target := 1]
temp[, year := y]
cross_walk_list[[as.character(y)]] = temp
}
rbindlist(cross_walk_list)
census_1870 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1870 Census/DS0011/02896-0011-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_ag_1870 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1870 Census of Agriculture/DS0047/02896-0047-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_1880 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1880 Census/DS0015/02896-0015-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_ag_1880 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1880 Census of Agriculture/DS0048/02896-0048-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_1890 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1890 Census/DS0018/02896-0018-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_ag_1890 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1890 Census of Agriculture/DS0049/02896-0049-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_1900 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1900 Census/DS0020/02896-0020-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_ag_1900 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1900 Census of Agriculture/DS0050/02896-0050-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_1910 = read.dta('/home/mdweaver/Dropbox/County Data/Census/1910 Census/DS0022/02896-0022-Data.dta') %>%
as.data.table() %>% .[level %in% 1]
census_ag_1880$cottonac
census_ag_1890$cottonac
census_ag_1900$cottonac
850 *3 + 620*4 + 665*3
?dist
source('~/.active-rstudio-document', echo=TRUE)
require(data.table)
table = fread("/home/mdweaver/Downloads/newspaper_lynching_content (Responses) - Form Responses 1.csv")
table = fread("/home/mdweaver/Downloads/newspaper_lynching_content (Responses) - Form Responses 1.tsv")
table
table = table[, list(Timestamp, Name = `What is your name?`)]
table
table = table[, time := strptime(Timestamp)]
?strptime
table[, time := strptime(Timestamp, format = '%m/%d/%Y %H:%M:%S')]
table
?rlf
?rle
table[, rle(Name)]
x = table[, rle(Name)]
x
x$lengths
table[, group := {l = rle(Name)$lengths; rep(1:length(l), each = l)}]
x$lengths
length(x$lengths)
rep(1:length(x), each = x)
rep(1:length(x$lengths), each = x$lengths)
table[, group := {l = rle(Name)$lengths; rep(1:length(l),  l)}]
table
?lag
table[, diff := time - shift(time, 1), by = group]
table
table[, mean(diff, na.rm = T), by= Name]
table[Name %in% 'Arian Zand']
table[, diff := time - shift(time, 1), by = Name]
table
hist(table$diff)
hist(as.numeric(table$diff))
200000 / 60 / 60
200000 / 60 / 60 / 24
table[diff > 60 * 60]
table[diff < 60 * 60]
table[diff < 60 * 60, as.numeric(diff)] %>% hist
require(magrittr)
table[diff < 60 * 60, as.numeric(diff)] %>% hist
2000 / 60
100 / 60
rm(list = ls())
instakk
install.packages('dagR')
require(dagR)
?dag.draw
demo.dag1()
?dag
demo.dag1;
dag.draw(demo.dag1())
demo.dag1;
?text
c= 0
counter = 0
while (c < 0.9) {
x = rnorm(15)
y = rnorm(15)
c = cor(x,y)
counter = counter + 1
}
plot(x,y, main = "15 observations, x and y unrelated")
text(1,1, labels = paste0("Correlation: ", round(c, 2)))
plot(x,y, main = "10 observations, x and y unrelated")
text(0,1, labels = paste0("Correlation: ", round(c, 2)))
text(0, -1, labels = paste0("Tries: ", counter))
c= 0
counter = 0
while (c < 0.9) {
x = rnorm(10)
y = rnorm(10)
c = cor(x,y)
counter = counter + 1
}
plot(x,y, main = "10 observations, x and y unrelated")
text(1,1, labels = paste0("Correlation: ", round(c, 2)))
plot(x,y, main = "10 observations, x and y unrelated")
text(0,1, labels = paste0("Correlation: ", round(c, 2)))
text(0, -1, labels = paste0("Tries: ", counter))
c= 0
counter = 0
while (c < 0.9) {
x = rnorm(5)
y = rnorm(5)
c = cor(x,y)
counter = counter + 1
}
plot(x,y, main = "5 observations, x and y unrelated")
text(mean(x) - sd(x),mean(y), labels = paste0("Correlation: ", round(c, 2)))
plot(x,y, main = "5 observations, x and y unrelated")
text(mean(x) - sd(x),mean(y), labels = paste0("Correlation: ", round(c, 2)))
text(mean(x) + sd(x),mean(y), labels = paste0("Tries: ", counter))
?mvnorm
require(MASS)
?mvtnrom
?mvtnorm
?mvtnorm
?mvnorm
?mvrnorm
mvrnorm(1, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T)
)
mvrnorm(1, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2)
)
mvrnorm(5, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
a = mvrnorm(5, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
plot(a[,1], a[,2])
b = mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2)
)
plot(b[,1], b[,2])
c = mvrnorm(500, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
plot(c[,1], c[,2])
a2 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,1,1,1), byrow = T, ncol = 2))
plot(a2[,1], a2[,2])
a2 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.9,0.9,1), byrow = T, ncol = 2))
plot(a2[,1], a2[,2])
a1 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
plot(a1[,1], a1[,2])
?par
par(mfrow = c(1,2))
a1 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
a2 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.9,0.9,1), byrow = T, ncol = 2))
plot(a1[,1], a1[,2], main = "Weak => Possibly random", xlab = 'x', ylab = 'y')
plot(a2[,1], a2[,2], main = "Strong => Less likely to be random", xlab = 'x', ylab = 'y')
?abline
par(mfrow = c(1,2))
a1 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
a2 = mvrnorm(10, mu = c(0,0), Sigma = matrix(c(1,0.9,0.9,1), byrow = T, ncol = 2))
plot(a1[,1], a1[,2], main = "Weak => Possibly random", xlab = 'x', ylab = 'y')
abline(lm(a1[,2] ~ a1[,1]))
plot(a2[,1], a2[,2], main = "Strong => Less likely to be random", xlab = 'x', ylab = 'y')
abline(lm(a2[,2] ~ a2[,1])
)
plot(a1[,1], a1[,2], main = "Weak => Possibly random", xlab = 'x', ylab = 'y',
xlim = range(cbind(a1,a2)), ylim = range(cbind(a1,a2)))
abline(lm(a1[,2] ~ a1[,1]))
plot(a2[,1], a2[,2], main = "Strong => Less likely to be random", xlab = 'x', ylab = 'y',
xlim = range(cbind(a1,a2)), ylim = range(cbind(a1,a2)))
abline(lm(a2[,2] ~ a2[,1]))
par(mfrow = c(1,2))
b1 = mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
b2 = mvrnorm(500, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
plot(b1[,1], b1[,2], main = "Weak => Possibly random", xlab = 'x', ylab = 'y',
xlim = range(cbind(b1,b2)), ylim = range(cbind(b1,b2)))
abline(lm(b1[,2] ~ b1[,1]))
plot(b2[,1], b2[,2], main = "Strong => Less likely to be random", xlab = 'x', ylab = 'y',
xlim = range(cbind(b1,b2)), ylim = range(cbind(b1,b2)))
abline(lm(b2[,2] ~ b2[,1]))
par(mfrow = c(1,1))
par(mfrow = c(1,2))
b1 = mvrnorm(50, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
b2 = mvrnorm(500, mu = c(0,0), Sigma = matrix(c(1,0.5,0.5,1), byrow = T, ncol = 2))
plot(b1[,1], b1[,2], main = "Weak => Possibly random", xlab = 'x', ylab = 'y',
xlim = range(rbind(b1,b2)), ylim = range(rbind(b1,b2)))
abline(lm(b1[,2] ~ b1[,1]))
plot(b2[,1], b2[,2], main = "Strong => Less likely to be random", xlab = 'x', ylab = 'y',
xlim = range(rbind(b1,b2)), ylim = range(rbind(b1,b2)))
abline(lm(b2[,2] ~ b2[,1]))
par(mfrow = c(1,1))
setwd('/home/mdweaver/Dropbox/POLI110/lectures/lecture_10')
require(data.table)
crime = fread('crime.csv')
crime
crime[, gun_ownership := as.numeric(gsub('%', '', gun_ownership))]
crime
plot(crime$gun_ownership ,crime$gun_murder_percapita)
plot(crime$gun_ownership ,crime$gun_murder_percapita)
plot(crime$gun_ownership ,crime$murder_percapita)
crime$gun_ownership
plot(crime$gun_ownership ,crime$murder_percapita)
plot(crime$gun_ownership)
crime$gun_ownership
plot(crime$gun_ownership, crime$murder_per_capita)
plot(crime$gun_ownership, crime$gun)murder_per_capita)
plot(crime$gun_ownership, crime$gun_murder_per_capita)
abline(lm(gun_murder_per_capita ~ gun_ownership, data=crime))
abline(lm(gun_murder_percapita ~ gun_ownership, data=crime))
plot(crime$gun_ownership, crime$gun_murder_percapita)
abline(lm(gun_murder_percapita ~ gun_ownership, data=crime))
cor.test(crime$gun_ownership, crime$gun_murder_percapita)
cor.test(crime$gun_ownership, crime$gun_murder_percapita)$p
cor.test(crime$gun_ownership, crime$gun_murder_percapita)$p.value
c = cor.test(crime$gun_ownership, crime$gun_murder_percapita)
c$statistic
c$parameter
c$estimate
plot(crime$gun_ownership, crime$gun_murder_percapita, xlab = "Gun Owners (%)", ylab = "Firearms Homicides Per Capita")
abline(lm(gun_murder_percapita ~ gun_ownership, data=crime))
text(10,10, paste0("Correlation: ", round(c$estimate, 2)))
text(10,7.5, paste0("p-value: ", round(c$p.value, 2)))
?test
?tesxt
?text
plot(crime$gun_ownership, crime$gun_murder_percapita, xlab = "Gun Owners (%)", ylab = "Firearms Homicides Per Capita")
abline(lm(gun_murder_percapita ~ gun_ownership, data=crime))
text(10,10, paste0("Correlation: ", round(c$estimate, 2)), pos = 4)
text(10,7.5, paste0("p-value: ", round(c$p.value, 2)), pos = 4)
?dag.init
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1))
dag.draw(dag)
demo.dag0
dag.draw(demo.dag0())
?dag.init
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(2), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1))
dag.draw(dag)
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 0,-1),
assocs = c(0,-1))
dag.draw(dag)
knitr::opts_chunk$set(echo = FALSE)
require(magrittr)
require(kableExtra)
require(knitr)
require(ggplot2)
require(gtools)
require(dagR)
require(data.table)
require(MASS)
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag <- dag.init(y.name = "Y", x.name = "X",
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag.draw(dag)
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1,1 -1))
dag.draw(dag)
dag
dag.draw(dag)
dag
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1))
dag
dag.draw(demo.dag3())
dag.draw(demo.dag2())
dag.draw(demo.dag1())
demo.dag3
demo.dag2
demo.dag1
dag <- dag.init(y.name = "Y", x.name = "X",
covs = c(1), cov.names = c("Z"),
arcs = c(1, 0, 1,-1))
dag.draw(dag)
?dag.init
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('X','Z','Y'))
dag.draw(dag)
?dag.draw
dag.draw(dag, legend = F)
?dag.init
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
assocs = c(0,-1),
symbols = c('X','Z','Y'))
dag.draw(dag, legend = F)
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('X','Z','Y'))
dag.draw(dag, legend = F)
dag.draw(add.arc(dag, arc = c(0,-1), type = 1), legend = F)
add.arc(dag, arc = c(0,-1), type = 1)
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F)
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F)
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('X','Z','Y'))
dag.draw(dag, legend = F)
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F)
dag.draw(dag.init(covs = c(1,1,1), arcs = c(2,1,2,3)))
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1, 0,-1),
symbols = c('X','Z','Y'))
dag.draw(dag, legend = F)
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('X','Z','Y'))
dag.draw(dag, legend = F)
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F, noxy=1)
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('Chocolate','Wealth','Nobels'))
dag.draw(dag, legend = F)
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F, noxy=1)
test(1,1, 'test')
text(1,1, 'test')
text(dag$x[2], dag$y[1], "Not causal!")
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('Chocolate','Wealth','Nobels'))
dag.draw(dag, legend = F)
text(dag$x[2], dag$y[1] + 0.1, "Cause?")
text(dag$x[2], dag$y[1] + 0.05, "Cause?")
text(mean(dag$x[1:2]), mean(dag$y[1:2]), "+")
text(mean(dag$x[1:2]), mean(dag$y[1:2]), "Causes\nIncrease")
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F, noxy=1)
text(mean(dag$x[1:2]), mean(dag$y[1:2]), "Causes\nIncrease")
text(mean(dag$x[2:3]), mean(dag$y[2:3]), "Causes\nIncrease")
text(dag$x[2], dag$y[1], "Positive Correlation")
riots = fread('./IndiaElections.csv')
riots
plot(riots$INC_voteshare, riots$INJURED_1yr)
plot(riots$INC_voteshare, log(riots$INJURED_1yr + 1))
plot(riots$INC_voteshare, log(riots$INJURED_1yr + .1))
plot(riots$INC_voteshare, riots$INJURED_1yr)
abline(lm(INJURED_1yr ~ INC_voteshare, riots))
plot(riots$INC_voteshare, riots$INJURED_1yr)
abline(lm(INJURED_1yr ~ INC_voteshare, riots))
plot(riots$INC_voteshare, riots$COUNT_1yr)
abline(lm(COUNT_1yr ~ INC_voteshare, riots))
plot(riots$INC_voteshare, riots$COUNT_1yr, xlab = "INC Voteshare", ylab = "Hindu Muslim Riot (count)", main = "Riots and Secular Party Votes")
abline(lm(COUNT_1yr ~ INC_voteshare, riots), col = 'red', lwd = 2)
c = cor.test(riots$INC_voteshare, riots$COUNT_1yr)
c$estimate
text(.6, 6, paste0("Correlation: ", c$estimate), pos = 4)
text(.6, 5, paste0("P-value: ", c$p.value), pos = 4)
plot(riots$INC_voteshare, riots$COUNT_1yr, xlab = "INC Voteshare", ylab = "Hindu Muslim Riot (count)", main = "Riots and Secular Party Votes")
abline(lm(COUNT_1yr ~ INC_voteshare, riots), col = 'red', lwd = 2)
c = cor.test(riots$INC_voteshare, riots$COUNT_1yr)
text(.6, 6, paste0("Correlation: ", round(c$estimate, 2)), pos = 4)
text(.6, 5, paste0("P-value: ", round(c$p.value, 2)), pos = 4)
text(.6, 5, paste0("P-value: ", round(c$p.value, 6)), pos = 4)
text(.6, 5, paste0("P-value: ", round(c$p.value, 5)), pos = 4)
round(c$p.value, 5)
sprintf("%f.5", round(c$p.value, 5))
sprintf("%f.", round(c$p.value, 5))
sprintf("%f", round(c$p.value, 5))
sprintf("%f.4", round(c$p.value, 5))
sprintf( round(c$p.value, 5))
dag <- dag.init(y.name = "", x.name = "",
covs = c(1),
arcs = c(1, 0, 1,-1),
symbols = c('INC Votes','Religious Harmony','Riots'))
dag.draw(dag, legend = F)
text(dag$x[2], dag$y[1] + 0.05, "Cause?")
dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F, noxy=1)
text(mean(dag$x[1:2]), mean(dag$y[1:2]), "Causes\nIncrease")
text(mean(dag$x[2:3]), mean(dag$y[2:3]), "Causes\nDecrease")
text(dag$x[2], dag$y[1], "Negative Correlation")
dag <- dag.init(y.name = "", x.name = "",
covs = c(1,1,1),
arcs = c(1,-1,2,-1,3,-1),
symbols = c('Income Growth','Campaign Spending', 'War Casuaties', 'Party Ideology' ,'Incumbent Vote (%)'))
dag.draw(dag, legend = F)
?dag.draw
dag.draw(demo.dag1());
a = dag.draw(demo.dag1());
a
plot(a)
a
print(a)
a
a
print(a)
a
a = dag.draw(demo.dag1());
a
text(dag$x[2], dag$y[1], "Correlation; Not causal!")
invisible(dag.draw(add.arc(dag, arc = c(1,3), type = 1), legend = F, noxy=1))
